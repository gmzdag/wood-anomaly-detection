# -*- coding: utf-8 -*-
"""DRAEM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eu696ZTwGk_80d2V5BoE83Wy_oGjOyvQ

# DRAEM

Bu notebook'ta, ahşap yüzeylerdeki anomalileri tespit etmek için bir *DRAEM* modeli geliştirilecek ve eğitilecektir.

## 1. Ortam Kurulumu

### 1.1 Google Drive Bağlantısı
"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive

"""### 1.2 DRAEM Deposunun Klonlanması"""

!git clone https://github.com/gmzdag/wood-anomaly-detection.git

# Commented out IPython magic to ensure Python compatibility.
# %cd cd wood-anomaly-detection/models/DRAEM/src

"""### 1.3 Gerekli Kütüphanelerin Kurulumu"""

!pip install imgaug

!pip install numpy==1.26.4

"""## 2. Model Ağırlıklarının ve Veri Setlerinin Hazırlanması

DRAEM modeli için önceden eğitilmiş kontrol noktalarını (checkpoint) indirecek ve anomali üretimi için kullanılacak DTD (Daha Fazla Dokulu Sözlük) veri setini hazırlanması.
"""

# Commented out IPython magic to ensure Python compatibility.
!mkdir checkpoints
# %cd checkpoints
!pip install gdown
!gdown https://drive.google.com/uc?id=1eOE8wXNihjsiDvDANHFbg_mQkLesDrs1
!unzip DRAEM_checkpoints.zip

# Commented out IPython magic to ensure Python compatibility.
# %cd ..

# Commented out IPython magic to ensure Python compatibility.
!mkdir datasets
# %cd datasets
!wget https://www.robots.ox.ac.uk/~vgg/data/dtd/download/dtd-r1.0.1.tar.gz
!tar -xf dtd-r1.0.1.tar.gz
!rm dtd-r1.0.1.tar.gz

# Commented out IPython magic to ensure Python compatibility.
# %cd ..

"""## 3. Model Eğitimi

DRAEM modelinin ahşap veri seti üzerinde eğitilmesi. Eğitim parametreleri komut satırı argümanları ile belirtilir.

**Parametre Açıklamaları:**
- `--gpu_id`: Kullanılacak GPU'nun ID'si.
- `--obj_id`: Eğitilecek obje sınıfının ID'si. (Ahşap için 14)
- `--lr`: Öğrenme oranı (learning rate).
- `--bs`: Batch boyutu (batch size).
- `--epochs`: Eğitim epoch sayısı.
- `--data_path`: Ahşap veri setinin yolu.
- `--anomaly_source_path`: Anomali üretimi için kullanılacak DTD veri setinin yolu.
- `--checkpoint_path`: Eğitim sırasında model ağırlıklarının kaydedileceği dizin.
- `--log_path`: Eğitim loglarının kaydedileceği dizin.
- `--visualize`: Eğitim sırasında görselleştirmelerin yapılıp yapılmayacağı.
"""

!python train_DRAEM.py \
  --gpu_id 0 \
  --obj_id 14 \
  --lr 0.0001 \
  --bs 8 \
  --epochs 200 \
  --data_path /content/drive/MyDrive/processed_dataset/\
  --anomaly_source_path /content/drive/MyDrive/DRAEM/datasets/dtd/images/\
  --checkpoint_path ./checkpoints/ \
  --log_path ./logs/\
  --visualize

"""## 4. Modelin Test Edilmesi

Eğitilen modelin performansını test edilmesi. Farklı epoch sayılarında eğitilmiş modelleri test etmek için `base_model_name` parametresi ayarlandı.
Bu model ise epoch sayısın değiştirilmesi ile oluşturuldu.

DRAEM_test_x_y_bs8 -> x learning rate'i temsil ederken y ise epoch sayısını belirtmektedir.

**Parametre Açıklamaları:**
- `--gpu_id`: Kullanılacak GPU'nun ID'si.
- `--base_model_name`: Test edilecek modelin adı. Bu genellikle öğrenme oranı, epoch sayısı ve batch boyutu gibi bilgileri içerir. Eğitim çıktılarında bu isim belirtilir.
- `--data_path`: Test veri setinizin yolu.
- `--checkpoint_path`: Model ağırlıklarının bulunduğu dizin.

### 4.1 Farklı Epoch Değerleri İle

#### 20 Epoch
"""

!python test_DRAEM.py \
  --gpu_id 0 \
  --base_model_name "DRAEM_test_0.0001_20_bs8" \
  --data_path /content/drive/MyDrive/processed_dataset/ \
  --checkpoint_path /content/drive/MyDrive/DRAEM/checkpoints

"""#### 50 Epoch"""

!python test_DRAEM.py \
  --gpu_id 0 \
  --base_model_name "DRAEM_test_0.0001_50_bs8" \
  --data_path /content/drive/MyDrive/processed_dataset/ \
  --checkpoint_path /content/drive/MyDrive/DRAEM/checkpoints

"""#### 100 Epoch"""

!python test_DRAEM.py \
  --gpu_id 0 \
  --base_model_name "DRAEM_test_0.0001_100_bs8" \
  --data_path /content/drive/MyDrive/processed_dataset/ \
  --checkpoint_path /content/drive/MyDrive/DRAEM/checkpoints

"""#### 200 Epoch"""

!python test_DRAEM.py \
  --gpu_id 0 \
  --base_model_name "DRAEM_test_0.0001_200_bs8" \
  --data_path /content/drive/MyDrive/processed_dataset/ \
  --checkpoint_path /content/drive/MyDrive/DRAEM/checkpoints

"""### 4.2 Farklı Learning Değerleri İle"""

!python train_DRAEM.py \
  --gpu_id 0 \
  --obj_id 14 \
  --lr 5e-5 \
  --bs 8 \
  --epochs 20 \
  --data_path /content/drive/MyDrive/processed_dataset/\
  --anomaly_source_path /content/drive/MyDrive/DRAEM/datasets/dtd/images/\
  --checkpoint_path ./checkpoints/ \
  --log_path ./logs/\
  --visualize

"""#### 5e-05 Learning Rate"""

!python test_DRAEM.py \
  --gpu_id 0 \
  --base_model_name "DRAEM_test_5e-05_20_bs8" \
  --data_path /content/drive/MyDrive/processed_dataset/ \
  --checkpoint_path /content/drive/MyDrive/DRAEM/checkpoints

"""## 5. Veri Görselleştirme"""

import os
from PIL import Image
import matplotlib.pyplot as plt

image_directory = 'visualization/wood/'

image_files = [f for f in os.listdir(image_directory) if f.endswith('.png')]
image_files.sort()

selected_images = image_files[:5]

fig, axes = plt.subplots(len(selected_images), 1, figsize=(5, 15))

for i, image_file in enumerate(selected_images):
    image_path = os.path.join(image_directory, image_file)

    img = Image.open(image_path)

    axes[i].imshow(img)
    axes[i].set_title(image_file)
    axes[i].axis('off')

plt.tight_layout()
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %cd ..